**************
Monkey Patched User Class ... gulp!
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#     * Rearrange models' order
#     * Make sure each model has one field with primary_key=True
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.

from django.db import models

class GroupPermission(models.Model):
    group_id = models.IntegerField()
    permission_id = models.IntegerField()
    class Meta:
        db_table = u'group_permission'

class PolicyGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.TextField()
    description = models.TextField()
    place = models.ForeignKey(Location)
    class Meta:
        db_table = u'policy_group'

class AccessPolicy(models.Model):
    id = models.IntegerField(primary_key=True)
    location = models.ForeignKey(Location)
    precedence = models.IntegerField()
    policy_resource = models.ForeignKey(Resource)
    group = models.ForeignKey(TgGroup)
    tariff = models.ForeignKey(Resource)
    policygroup = models.ForeignKey(PolicyGroup)
    policy_start_date = models.DateField()
    policy_end_date = models.DateField()
    class Meta:
        db_table = u'access_policy'

class Open(models.Model):
    id = models.IntegerField(primary_key=True)
    policy = models.ForeignKey(AccessPolicy)
    open_time_start_date = models.DateField()
    open_time_day = models.IntegerField()
    open_time_date = models.DateField()
    open_time_start = models.TimeField()
    open_time_end = models.TimeField()
    class Meta:
        db_table = u'open'

class LocationMetaData(models.Model):
    id = models.IntegerField(primary_key=True)
    location = models.ForeignKey(Location)
    attr_name = models.TextField()
    attr_value = models.TextField()
    class Meta:
        db_table = u'location_meta_data'

class Pricing(models.Model):
    id = models.IntegerField(primary_key=True)
    tariff = models.ForeignKey(Resource)
    cost = models.DecimalField(max_digits=10, decimal_places=2)
    resource = models.ForeignKey(Resource)
    nextperiod = models.ForeignKey('self')
    periodstarts = models.DateTimeField()
    periodends = models.DateTimeField()
    class Meta:
        db_table = u'pricing'

class Permission(models.Model):
    id = models.IntegerField(primary_key=True)
    permission_name = models.CharField(unique=True, max_length=40)
    description = models.CharField(max_length=255)
    class Meta:
        db_table = u'permission'

class Invoice(models.Model):
    id = models.IntegerField(primary_key=True)
    billingaddress = models.TextField()
    user = models.ForeignKey(TgUser)
    start = models.DateTimeField()
    end_time = models.DateTimeField()
    created = models.DateTimeField()
    sent = models.DateTimeField()
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    currency = models.CharField(max_length=4)
    location = models.ForeignKey(Location)
    total_tax = models.DecimalField(max_digits=10, decimal_places=2)
    resource_tax_dict = models.TextField() # This field type is a guess.
    vat_included = models.SmallIntegerField()
    number = models.IntegerField()
    class Meta:
        db_table = u'invoice'

class MicroSiteSpace(models.Model):
    id = models.IntegerField(primary_key=True)
    location = models.ForeignKey(Location)
    next = models.ForeignKey('self')
    name = models.TextField()
    description = models.TextField()
    image = models.ForeignKey(LocationFiles)
    active = models.IntegerField()
    class Meta:
        db_table = u'micro_site_space'

class TgGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    group_name = models.CharField(unique=True, max_length=40)
    display_name = models.CharField(max_length=255)
    created = models.DateTimeField()
    place = models.ForeignKey(Location)
    level = models.CharField(max_length=9)
    class Meta:
        db_table = u'tg_group'

class ResourceDependencies(models.Model):
    dependend_id = models.IntegerField()
    required_id = models.IntegerField()
    class Meta:
        db_table = u'resource_dependencies'

class ResourceSuggestions(models.Model):
    suggesting_id = models.IntegerField()
    suggested_id = models.IntegerField()
    class Meta:
        db_table = u'resource_suggestions'

class Report(models.Model):
    id = models.IntegerField(primary_key=True)
    owner = models.ForeignKey(TgUser)
    generated_on = models.DateTimeField()
    rtype = models.CharField(max_length=10)
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    grpby = models.TextField()
    records_filter = models.TextField() # This field type is a guess.
    class Meta:
        db_table = u'report'

class Rusage(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    resource = models.ForeignKey(Resource)
    date_booked = models.DateTimeField()
    start = models.DateTimeField()
    end_time = models.DateTimeField()
    quantity = models.IntegerField()
    cost = models.DecimalField(max_digits=10, decimal_places=2)
    customcost = models.DecimalField(max_digits=10, decimal_places=2)
    resource_name = models.CharField(max_length=200)
    resource_description = models.TextField()
    bookedby = models.ForeignKey(TgUser)
    invoice = models.ForeignKey(Invoice)
    usagesuggestedby = models.ForeignKey('self')
    meeting_name = models.TextField()
    number_of_people = models.IntegerField()
    notes = models.TextField()
    tariff = models.ForeignKey(Resource)
    new_resource_description = models.TextField()
    public_field = models.SmallIntegerField()
    meeting_description = models.TextField()
    confirmed = models.SmallIntegerField()
    cancelled = models.SmallIntegerField()
    refund = models.SmallIntegerField()
    refund_for = models.IntegerField()
    class Meta:
        db_table = u'rusage'

class ResourceQueue(models.Model):
    id = models.IntegerField(primary_key=True)
    foruser = models.ForeignKey(TgUser)
    rusage = models.ForeignKey(Rusage)
    class Meta:
        db_table = u'resource_queue'

class TgPermission(models.Model):
    id = models.IntegerField(primary_key=True)
    child_name = models.CharField(max_length=255)
    permission_name = models.CharField(unique=True, max_length=16)
    description = models.CharField(max_length=255)
    class Meta:
        db_table = u'tg_permission'

class UserMetaData(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    attr_name = models.CharField(max_length=40)
    attr_value = models.TextField()
    class Meta:
        db_table = u'user_meta_data'

class TgVisit(models.Model):
    id = models.IntegerField(primary_key=True)
    visit_key = models.CharField(unique=True, max_length=40)
    created = models.DateTimeField()
    expiry = models.DateTimeField()
    class Meta:
        db_table = u'tg_visit'

class TgVisitIdentity(models.Model):
    id = models.IntegerField(primary_key=True)
    visit_key = models.CharField(unique=True, max_length=40)
    user_id = models.IntegerField()
    class Meta:
        db_table = u'tg_visit_identity'

class UserGroup(models.Model):
    group_id = models.IntegerField()
    user_id = models.IntegerField()
    id = models.IntegerField(primary_key=True)
    class Meta:
        db_table = u'user_group'

class Selection(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    attr_name = models.CharField(max_length=40)
    attr_value = models.IntegerField()
    class Meta:
        db_table = u'selection'

class Visit(models.Model):
    id = models.IntegerField(primary_key=True)
    visit_key = models.CharField(unique=True, max_length=40)
    created = models.DateTimeField()
    expiry = models.DateTimeField()
    class Meta:
        db_table = u'visit'

class VisitIdentity(models.Model):
    id = models.IntegerField(primary_key=True)
    visit_key = models.CharField(unique=True, max_length=40)
    user_id = models.IntegerField()
    class Meta:
        db_table = u'visit_identity'

class UserPolicyGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    policygroup = models.ForeignKey(PolicyGroup)
    class Meta:
        db_table = u'user_policy_group'

class Alias(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    alias_name = models.TextField()
    class Meta:
        db_table = u'alias'

class Note(models.Model):
    id = models.IntegerField(primary_key=True)
    title = models.CharField(max_length=200)
    body = models.TextField()
    date = models.DateTimeField()
    onuser = models.ForeignKey(TgUser)
    byuser = models.ForeignKey(TgUser)
    action = models.ForeignKey(Todo)
    class Meta:
        db_table = u'note'

class LocationFiles(models.Model):
    id = models.IntegerField(primary_key=True)
    location = models.ForeignKey(Location)
    attr_name = models.CharField(max_length=50)
    mime_type = models.CharField(max_length=20)
    class Meta:
        db_table = u'location_files'

class Todo(models.Model):
    id = models.IntegerField(primary_key=True)
    body = models.TextField()
    subject = models.CharField(max_length=200)
    foruser = models.ForeignKey(TgUser)
    createdby = models.ForeignKey(TgUser)
    opened = models.DateTimeField()
    due = models.DateTimeField()
    closed = models.DateTimeField()
    parent = models.ForeignKey('self')
    action = models.TextField()
    action_id = models.IntegerField()
    class Meta:
        db_table = u'todo'

class DjangoSession(models.Model):
    session_key = models.CharField(max_length=40, primary_key=True)
    session_data = models.TextField()
    expire_date = models.DateTimeField()
    class Meta:
        db_table = u'django_session'

class Location(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=200)
    currency = models.CharField(max_length=3)
    defaulttariff = models.ForeignKey(Resource)
    vat_default = models.FloatField()
    billing_address = models.TextField()
    messages = models.TextField() # This field type is a guess.
    cancellation_charges = models.TextField() # This field type is a guess.
    timezone = models.CharField(max_length=40)
    company_no = models.CharField(max_length=40)
    url = models.CharField(max_length=40)
    vat_no = models.CharField(max_length=40)
    telephone = models.CharField(max_length=40)
    account_no = models.CharField(max_length=40)
    bank = models.CharField(max_length=40)
    sort_code = models.CharField(max_length=40)
    iban_no = models.CharField(max_length=40)
    swift_no = models.CharField(max_length=40)
    payment_terms = models.TextField()
    invlogo_mimetype = models.CharField(max_length=15)
    logo_mimetype = models.CharField(max_length=15)
    resourcegroup_order = models.TextField() # This field type is a guess.
    homelogo_mimetype = models.CharField(max_length=15)
    homepage_title = models.CharField(max_length=60)
    homepage_description = models.TextField()
    holidays = models.TextField() # This field type is a guess.
    calendar = models.ForeignKey(Resource)
    vat_included = models.SmallIntegerField()
    rfid_enabled = models.SmallIntegerField()
    locale = models.CharField(max_length=8)
    tentative_booking_enabled = models.SmallIntegerField()
    invoice_newscheme = models.IntegerField()
    microsite_active = models.IntegerField()
    class Meta:
        db_table = u'location'

class Resourcegroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.TextField()
    description = models.TextField()
    location = models.ForeignKey(Location)
    resources_order = models.TextField() # This field type is a guess.
    group_type = models.CharField(max_length=40)
    class Meta:
        db_table = u'resourcegroup'

class Resource(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=200)
    place = models.ForeignKey(Location)
    type = models.CharField(max_length=20)
    vat = models.FloatField()
    description = models.TextField()
    active = models.SmallIntegerField()
    time_based = models.SmallIntegerField()
    resgroup = models.ForeignKey(Resourcegroup)
    resimage_mimetype = models.CharField(max_length=15)
    class Meta:
        db_table = u'resource'

class AuthMessage(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    message = models.TextField()
    class Meta:
        db_table = u'auth_message'

class NotificationNoticesetting(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    notice_type = models.ForeignKey(NotificationNoticetype)
    medium = models.CharField(max_length=1)
    send = models.BooleanField()
    class Meta:
        db_table = u'notification_noticesetting'

class NotificationNotice(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    message = models.TextField()
    notice_type = models.ForeignKey(NotificationNoticetype)
    added = models.DateTimeField()
    unseen = models.BooleanField()
    archived = models.BooleanField()
    on_site = models.BooleanField()
    class Meta:
        db_table = u'notification_notice'

class NotificationNoticequeuebatch(models.Model):
    id = models.IntegerField(primary_key=True)
    pickled_data = models.TextField()
    class Meta:
        db_table = u'notification_noticequeuebatch'

class NotificationObserveditem(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.IntegerField()
    notice_type = models.ForeignKey(NotificationNoticetype)
    added = models.DateTimeField()
    signal = models.TextField()
    class Meta:
        db_table = u'notification_observeditem'

class NotificationNoticetype(models.Model):
    id = models.IntegerField(primary_key=True)
    label = models.CharField(max_length=40)
    display = models.CharField(max_length=50)
    description = models.CharField(max_length=100)
    default = models.IntegerField()
    class Meta:
        db_table = u'notification_noticetype'

class EmailconfirmationEmailconfirmation(models.Model):
    id = models.IntegerField(primary_key=True)
    email_address = models.ForeignKey(EmailconfirmationEmailaddress)
    sent = models.DateTimeField()
    confirmation_key = models.CharField(max_length=40)
    class Meta:
        db_table = u'emailconfirmation_emailconfirmation'

class EmailconfirmationEmailaddress(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    email = models.CharField(max_length=75)
    verified = models.BooleanField()
    primary = models.BooleanField()
    class Meta:
        db_table = u'emailconfirmation_emailaddress'

class FriendsFriendship(models.Model):
    id = models.IntegerField(primary_key=True)
    to_user = models.ForeignKey(TgUser)
    from_user = models.ForeignKey(TgUser)
    added = models.DateField()
    class Meta:
        db_table = u'friends_friendship'

class FriendsJoininvitation(models.Model):
    id = models.IntegerField(primary_key=True)
    from_user = models.ForeignKey(TgUser)
    contact = models.ForeignKey(FriendsContact)
    message = models.TextField()
    sent = models.DateField()
    status = models.CharField(max_length=1)
    confirmation_key = models.CharField(max_length=40)
    class Meta:
        db_table = u'friends_joininvitation'

class FriendsFriendshipinvitation(models.Model):
    id = models.IntegerField(primary_key=True)
    from_user = models.ForeignKey(TgUser)
    to_user = models.ForeignKey(TgUser)
    message = models.TextField()
    sent = models.DateField()
    status = models.CharField(max_length=1)
    class Meta:
        db_table = u'friends_friendshipinvitation'

class MailerMessage(models.Model):
    id = models.IntegerField(primary_key=True)
    to_address = models.CharField(max_length=50)
    from_address = models.CharField(max_length=50)
    subject = models.CharField(max_length=100)
    message_body = models.TextField()
    when_added = models.DateTimeField()
    priority = models.CharField(max_length=1)
    class Meta:
        db_table = u'mailer_message'

class MailerDontsendentry(models.Model):
    id = models.IntegerField(primary_key=True)
    to_address = models.CharField(max_length=50)
    when_added = models.DateTimeField()
    class Meta:
        db_table = u'mailer_dontsendentry'

class MailerMessagelog(models.Model):
    id = models.IntegerField(primary_key=True)
    to_address = models.CharField(max_length=50)
    from_address = models.CharField(max_length=50)
    subject = models.CharField(max_length=100)
    message_body = models.TextField()
    when_added = models.DateTimeField()
    priority = models.CharField(max_length=1)
    when_attempted = models.DateTimeField()
    result = models.CharField(max_length=1)
    log_message = models.TextField()
    class Meta:
        db_table = u'mailer_messagelog'

class AnnouncementsAnnouncement(models.Model):
    id = models.IntegerField(primary_key=True)
    title = models.CharField(max_length=50)
    content = models.TextField()
    creator = models.ForeignKey(TgUser)
    creation_date = models.DateTimeField()
    site_wide = models.BooleanField()
    members_only = models.BooleanField()
    class Meta:
        db_table = u'announcements_announcement'

class OembedProviderrule(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=128)
    regex = models.CharField(max_length=2000)
    endpoint = models.CharField(max_length=2000)
    format = models.IntegerField()
    class Meta:
        db_table = u'oembed_providerrule'

class OembedStoredoembed(models.Model):
    id = models.IntegerField(primary_key=True)
    match = models.TextField()
    max_width = models.IntegerField()
    max_height = models.IntegerField()
    html = models.TextField()
    date_added = models.DateTimeField()
    class Meta:
        db_table = u'oembed_storedoembed'

class DjangodblogErrorbatch(models.Model):
    id = models.IntegerField(primary_key=True)
    class_name = models.CharField(max_length=128)
    message = models.TextField()
    traceback = models.TextField()
    is_resolved = models.BooleanField()
    times_seen = models.IntegerField()
    last_seen = models.DateTimeField()
    first_seen = models.DateTimeField()
    url = models.CharField(max_length=200)
    server_name = models.CharField(max_length=128)
    checksum = models.CharField(max_length=32)
    class Meta:
        db_table = u'djangodblog_errorbatch'

class DjangodblogError(models.Model):
    id = models.IntegerField(primary_key=True)
    class_name = models.CharField(max_length=128)
    message = models.TextField()
    traceback = models.TextField()
    datetime = models.DateTimeField()
    url = models.CharField(max_length=200)
    server_name = models.CharField(max_length=128)
    class Meta:
        db_table = u'djangodblog_error'

class ThreadedcommentsThreadedcomment(models.Model):
    id = models.IntegerField(primary_key=True)
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.IntegerField()
    parent = models.ForeignKey('self')
    user = models.ForeignKey(TgUser)
    date_submitted = models.DateTimeField()
    date_modified = models.DateTimeField()
    date_approved = models.DateTimeField()
    comment = models.TextField()
    markup = models.IntegerField()
    is_public = models.BooleanField()
    is_approved = models.BooleanField()
    ip_address = models.IPAddressField()
    class Meta:
        db_table = u'threadedcomments_threadedcomment'

class ThreadedcommentsFreethreadedcomment(models.Model):
    id = models.IntegerField(primary_key=True)
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.IntegerField()
    parent = models.ForeignKey('self')
    name = models.CharField(max_length=128)
    website = models.CharField(max_length=200)
    email = models.CharField(max_length=75)
    date_submitted = models.DateTimeField()
    date_modified = models.DateTimeField()
    date_approved = models.DateTimeField()
    comment = models.TextField()
    markup = models.IntegerField()
    is_public = models.BooleanField()
    is_approved = models.BooleanField()
    ip_address = models.IPAddressField()
    class Meta:
        db_table = u'threadedcomments_freethreadedcomment'

class ThreadedcommentsTestmodel(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=5)
    is_public = models.BooleanField()
    date = models.DateTimeField()
    class Meta:
        db_table = u'threadedcomments_testmodel'

class WikiArticle(models.Model):
    id = models.IntegerField(primary_key=True)
    title = models.CharField(max_length=50)
    content = models.TextField()
    summary = models.CharField(max_length=150)
    markup = models.CharField(max_length=3)
    creator = models.ForeignKey(TgUser)
    creator_ip = models.IPAddressField()
    created_at = models.DateTimeField()
    last_update = models.DateTimeField()
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.IntegerField()
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'wiki_article'

class WikiChangeset(models.Model):
    id = models.IntegerField(primary_key=True)
    article = models.ForeignKey(WikiArticle)
    editor = models.ForeignKey(TgUser)
    editor_ip = models.IPAddressField()
    revision = models.IntegerField()
    old_title = models.CharField(max_length=50)
    old_markup = models.CharField(max_length=3)
    content_diff = models.TextField()
    comment = models.CharField(max_length=50)
    modified = models.DateTimeField()
    reverted = models.BooleanField()
    class Meta:
        db_table = u'wiki_changeset'

class SwapsOffer(models.Model):
    id = models.IntegerField(primary_key=True)
    offerer = models.ForeignKey(TgUser)
    short_description = models.CharField(max_length=64)
    offering = models.TextField()
    want = models.TextField()
    state = models.SmallIntegerField()
    offered_time = models.DateTimeField()
    swapped_by = models.ForeignKey(SwapsSwap)
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'swaps_offer'

class SwapsSwap(models.Model):
    id = models.IntegerField(primary_key=True)
    proposing_offer = models.ForeignKey(SwapsOffer)
    responding_offer = models.ForeignKey(SwapsOffer)
    state = models.SmallIntegerField()
    proposed_time = models.DateTimeField()
    accepted_time = models.DateTimeField()
    fulfilled_time = models.DateTimeField()
    killed_time = models.DateTimeField()
    conflicted_by = models.ForeignKey('self')
    class Meta:
        db_table = u'swaps_swap'

class AppPluginsPluginpoint(models.Model):
    id = models.IntegerField(primary_key=True)
    label = models.CharField(unique=True, max_length=255)
    index = models.IntegerField()
    registered = models.BooleanField()
    status = models.SmallIntegerField()
    class Meta:
        db_table = u'app_plugins_pluginpoint'

class AppPluginsUserpluginpreference(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    plugin = models.ForeignKey(AppPluginsPlugin)
    visible = models.BooleanField()
    index = models.IntegerField()
    _order = models.IntegerField()
    class Meta:
        db_table = u'app_plugins_userpluginpreference'

class AppPluginsPlugin(models.Model):
    id = models.IntegerField(primary_key=True)
    point = models.ForeignKey(AppPluginsPluginpoint)
    label = models.CharField(unique=True, max_length=255)
    index = models.IntegerField()
    registered = models.BooleanField()
    status = models.SmallIntegerField()
    required = models.BooleanField()
    template = models.TextField()
    _order = models.IntegerField()
    class Meta:
        db_table = u'app_plugins_plugin'

class Votes(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.IntegerField()
    vote = models.SmallIntegerField()
    class Meta:
        db_table = u'votes'

class TaggingTag(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=50)
    class Meta:
        db_table = u'tagging_tag'

class TaggingTaggeditem(models.Model):
    id = models.IntegerField(primary_key=True)
    tag = models.ForeignKey(TaggingTag)
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.IntegerField()
    class Meta:
        db_table = u'tagging_taggeditem'

class BookmarksBookmark(models.Model):
    id = models.IntegerField(primary_key=True)
    url = models.CharField(unique=True, max_length=200)
    description = models.CharField(max_length=100)
    note = models.TextField()
    has_favicon = models.BooleanField()
    favicon_checked = models.DateTimeField()
    adder = models.ForeignKey(TgUser)
    added = models.DateTimeField()
    class Meta:
        db_table = u'bookmarks_bookmark'

class BookmarksBookmarkinstance(models.Model):
    id = models.IntegerField(primary_key=True)
    bookmark = models.ForeignKey(BookmarksBookmark)
    user = models.ForeignKey(TgUser)
    saved = models.DateTimeField()
    description = models.CharField(max_length=100)
    note = models.TextField()
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'bookmarks_bookmarkinstance'

class BlogPost(models.Model):
    id = models.IntegerField(primary_key=True)
    title = models.CharField(max_length=200)
    slug = models.CharField(max_length=50)
    author = models.ForeignKey(TgUser)
    creator_ip = models.IPAddressField()
    body = models.TextField()
    tease = models.TextField()
    status = models.IntegerField()
    allow_comments = models.BooleanField()
    publish = models.DateTimeField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    markup = models.CharField(max_length=3)
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'blog_post'

class PhotologueGalleryupload(models.Model):
    id = models.IntegerField(primary_key=True)
    zip_file = models.CharField(max_length=100)
    gallery = models.ForeignKey(PhotologueGallery)
    title = models.CharField(max_length=75)
    caption = models.TextField()
    description = models.TextField()
    is_public = models.BooleanField()
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'photologue_galleryupload'

class PhotologuePhotosize(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=20)
    width = models.IntegerField()
    height = models.IntegerField()
    quality = models.IntegerField()
    upscale = models.BooleanField()
    crop = models.BooleanField()
    pre_cache = models.BooleanField()
    increment_count = models.BooleanField()
    effect = models.ForeignKey(PhotologuePhotoeffect)
    watermark = models.ForeignKey(PhotologueWatermark)
    class Meta:
        db_table = u'photologue_photosize'

class PhotologueWatermark(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=30)
    description = models.TextField()
    image = models.CharField(max_length=100)
    style = models.CharField(max_length=5)
    opacity = models.FloatField()
    class Meta:
        db_table = u'photologue_watermark'

class AvatarAvatar(models.Model):
    id = models.IntegerField(primary_key=True)
    email_hash = models.CharField(max_length=128)
    user = models.ForeignKey(TgUser)
    primary = models.BooleanField()
    avatar = models.CharField(max_length=1024)
    date_uploaded = models.DateTimeField()
    class Meta:
        db_table = u'avatar_avatar'

class FlagFlaggedcontent(models.Model):
    id = models.IntegerField(primary_key=True)
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.IntegerField()
    creator = models.ForeignKey(TgUser)
    status = models.CharField(max_length=1)
    moderator = models.ForeignKey(TgUser)
    class Meta:
        db_table = u'flag_flaggedcontent'

class FlagFlaginstance(models.Model):
    id = models.IntegerField(primary_key=True)
    flagged_content = models.ForeignKey(FlagFlaggedcontent)
    user = models.ForeignKey(TgUser)
    when_added = models.DateTimeField()
    when_recalled = models.DateTimeField()
    comment = models.TextField()
    class Meta:
        db_table = u'flag_flaginstance'

class MicrobloggingTweet(models.Model):
    id = models.IntegerField(primary_key=True)
    text = models.CharField(max_length=140)
    sender_type = models.ForeignKey(DjangoContentType)
    sender_id = models.IntegerField()
    sent = models.DateTimeField()
    class Meta:
        db_table = u'microblogging_tweet'

class MicrobloggingTweetinstance(models.Model):
    id = models.IntegerField(primary_key=True)
    text = models.CharField(max_length=140)
    sender_type = models.ForeignKey(DjangoContentType)
    sender_id = models.IntegerField()
    sent = models.DateTimeField()
    recipient_type = models.ForeignKey(DjangoContentType)
    recipient_id = models.IntegerField()
    class Meta:
        db_table = u'microblogging_tweetinstance'

class MicrobloggingFollowing(models.Model):
    id = models.IntegerField(primary_key=True)
    follower_content_type = models.ForeignKey(DjangoContentType)
    follower_object_id = models.IntegerField()
    followed_content_type = models.ForeignKey(DjangoContentType)
    followed_object_id = models.IntegerField()
    class Meta:
        db_table = u'microblogging_following'

class LocationsLocation(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    time_checkin = models.DateTimeField()
    place = models.CharField(max_length=100)
    latitude = models.FloatField()
    longitude = models.FloatField()
    class Meta:
        db_table = u'locations_location'

class AboutMytestclass(models.Model):
    id = models.IntegerField(primary_key=True)
    x = models.CharField(max_length=20)
    y = models.CharField(max_length=20)
    class Meta:
        db_table = u'about_mytestclass'

class ProfilesProfile(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    name = models.CharField(max_length=50)
    about = models.TextField()
    location = models.CharField(max_length=40)
    website = models.CharField(max_length=200)
    class Meta:
        db_table = u'profiles_profile'

class AccountAccount(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    timezone = models.CharField(max_length=100)
    language = models.CharField(max_length=10)
    class Meta:
        db_table = u'account_account'

class AccountOtherserviceinfo(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    key = models.CharField(max_length=50)
    value = models.TextField()
    class Meta:
        db_table = u'account_otherserviceinfo'

class AccountPasswordreset(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    temp_key = models.CharField(max_length=100)
    timestamp = models.DateTimeField()
    reset = models.BooleanField()
    class Meta:
        db_table = u'account_passwordreset'

class TribesTopic(models.Model):
    id = models.IntegerField(primary_key=True)
    tribe = models.ForeignKey(TribesTribe)
    title = models.CharField(max_length=50)
    creator = models.ForeignKey(TgUser)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    body = models.TextField()
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'tribes_topic'

class ProjectsProjectmember(models.Model):
    id = models.IntegerField(primary_key=True)
    project = models.ForeignKey(ProjectsProject)
    user = models.ForeignKey(TgUser)
    away = models.BooleanField()
    away_message = models.CharField(max_length=500)
    away_since = models.DateTimeField()
    class Meta:
        db_table = u'projects_projectmember'

class ProjectsTopic(models.Model):
    id = models.IntegerField(primary_key=True)
    project = models.ForeignKey(ProjectsProject)
    title = models.CharField(max_length=50)
    creator = models.ForeignKey(TgUser)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    body = models.TextField()
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'projects_topic'

class ProjectsProject(models.Model):
    id = models.IntegerField(primary_key=True)
    slug = models.CharField(unique=True, max_length=50)
    name = models.CharField(unique=True, max_length=80)
    creator = models.ForeignKey(TgUser)
    created = models.DateTimeField()
    description = models.TextField()
    deleted = models.BooleanField()
    private = models.BooleanField()
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'projects_project'

class ProjectsTask(models.Model):
    id = models.IntegerField(primary_key=True)
    project = models.ForeignKey(ProjectsProject)
    summary = models.CharField(max_length=100)
    detail = models.TextField()
    creator = models.ForeignKey(TgUser)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    assignee = models.ForeignKey(TgUser)
    tags = models.CharField(max_length=255)
    status = models.CharField(max_length=50)
    state = models.CharField(max_length=1)
    class Meta:
        db_table = u'projects_task'

class PhotologuePhotoeffect(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=30)
    description = models.TextField()
    transpose_method = models.CharField(max_length=15)
    color = models.FloatField()
    brightness = models.FloatField()
    contrast = models.FloatField()
    sharpness = models.FloatField()
    filters = models.CharField(max_length=200)
    reflection_size = models.FloatField()
    reflection_strength = models.FloatField()
    background_color = models.CharField(max_length=7)
    class Meta:
        db_table = u'photologue_photoeffect'

class PhotosPool(models.Model):
    id = models.IntegerField(primary_key=True)
    photo = models.ForeignKey(PhotosImage)
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.IntegerField()
    created_at = models.DateTimeField()
    class Meta:
        db_table = u'photos_pool'

class DjangoAdminLog(models.Model):
    id = models.IntegerField(primary_key=True)
    action_time = models.DateTimeField()
    user = models.ForeignKey(TgUser)
    content_type = models.ForeignKey(DjangoContentType)
    object_id = models.TextField()
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    class Meta:
        db_table = u'django_admin_log'

class DjangoContentType(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=100)
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)
    class Meta:
        db_table = u'django_content_type'

class MessagesMessage(models.Model):
    id = models.IntegerField(primary_key=True)
    subject = models.CharField(max_length=120)
    body = models.TextField()
    sender = models.ForeignKey(TgUser)
    recipient = models.ForeignKey(TgUser)
    parent_msg = models.ForeignKey('self')
    sent_at = models.DateTimeField()
    read_at = models.DateTimeField()
    replied_at = models.DateTimeField()
    sender_deleted_at = models.DateTimeField()
    recipient_deleted_at = models.DateTimeField()
    class Meta:
        db_table = u'messages_message'

class DjangoOpenidNonce(models.Model):
    id = models.IntegerField(primary_key=True)
    server_url = models.CharField(max_length=255)
    timestamp = models.IntegerField()
    salt = models.CharField(max_length=40)
    class Meta:
        db_table = u'django_openid_nonce'

class DjangoOpenidAssociation(models.Model):
    id = models.IntegerField(primary_key=True)
    server_url = models.TextField()
    handle = models.CharField(max_length=255)
    secret = models.TextField()
    issued = models.IntegerField()
    lifetime = models.IntegerField()
    assoc_type = models.TextField()
    class Meta:
        db_table = u'django_openid_association'

class DjangoOpenidUseropenidassociation(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    openid = models.CharField(max_length=255)
    created = models.DateTimeField()
    class Meta:
        db_table = u'django_openid_useropenidassociation'

class AuthPermission(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=50)
    content_type = models.ForeignKey(DjangoContentType)
    codename = models.CharField(max_length=100)
    class Meta:
        db_table = u'auth_permission'

class AuthGroup(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=80)
    class Meta:
        db_table = u'auth_group'

class AuthGroupPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    group = models.ForeignKey(AuthGroup)
    permission = models.ForeignKey(AuthPermission)
    class Meta:
        db_table = u'auth_group_permissions'

class RobotsRuleAllowed(models.Model):
    id = models.IntegerField(primary_key=True)
    rule = models.ForeignKey(RobotsRule)
    url = models.ForeignKey(RobotsUrl)
    class Meta:
        db_table = u'robots_rule_allowed'

class RobotsRuleDisallowed(models.Model):
    id = models.IntegerField(primary_key=True)
    rule = models.ForeignKey(RobotsRule)
    url = models.ForeignKey(RobotsUrl)
    class Meta:
        db_table = u'robots_rule_disallowed'

class RobotsUrl(models.Model):
    id = models.IntegerField(primary_key=True)
    pattern = models.CharField(max_length=255)
    class Meta:
        db_table = u'robots_url'

class RobotsRule(models.Model):
    id = models.IntegerField(primary_key=True)
    robot = models.CharField(max_length=255)
    crawl_delay = models.DecimalField(max_digits=3, decimal_places=1)
    class Meta:
        db_table = u'robots_rule'

class RobotsRuleSites(models.Model):
    id = models.IntegerField(primary_key=True)
    rule = models.ForeignKey(RobotsRule)
    site = models.ForeignKey(DjangoSite)
    class Meta:
        db_table = u'robots_rule_sites'

class DjangoTemplate(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(unique=True, max_length=100)
    content = models.TextField()
    creation_date = models.DateTimeField()
    last_changed = models.DateTimeField()
    class Meta:
        db_table = u'django_template'

class DjangoTemplateSites(models.Model):
    id = models.IntegerField(primary_key=True)
    template = models.ForeignKey(DjangoTemplate)
    site = models.ForeignKey(DjangoSite)
    class Meta:
        db_table = u'django_template_sites'

class DjangoSite(models.Model):
    id = models.IntegerField(primary_key=True)
    domain = models.CharField(max_length=100)
    name = models.CharField(max_length=50)
    class Meta:
        db_table = u'django_site'

class FriendsContact(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    name = models.CharField(max_length=100)
    email = models.CharField(max_length=75)
    added = models.DateField()
    class Meta:
        db_table = u'friends_contact'

class FriendsContactUsers(models.Model):
    id = models.IntegerField(primary_key=True)
    contact = models.ForeignKey(FriendsContact)
    user = models.ForeignKey(TgUser)
    class Meta:
        db_table = u'friends_contact_users'

class PhotologueGallery(models.Model):
    id = models.IntegerField(primary_key=True)
    date_added = models.DateTimeField()
    title = models.CharField(unique=True, max_length=100)
    title_slug = models.CharField(unique=True, max_length=50)
    description = models.TextField()
    is_public = models.BooleanField()
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'photologue_gallery'

class PhotologueGalleryPhotos(models.Model):
    id = models.IntegerField(primary_key=True)
    gallery = models.ForeignKey(PhotologueGallery)
    photo = models.ForeignKey(PhotologuePhoto)
    class Meta:
        db_table = u'photologue_gallery_photos'

class PhotologuePhoto(models.Model):
    id = models.IntegerField(primary_key=True)
    image = models.CharField(max_length=100)
    date_taken = models.DateTimeField()
    view_count = models.IntegerField()
    crop_from = models.CharField(max_length=10)
    effect = models.ForeignKey(PhotologuePhotoeffect)
    title = models.CharField(unique=True, max_length=100)
    title_slug = models.CharField(unique=True, max_length=50)
    caption = models.TextField()
    date_added = models.DateTimeField()
    is_public = models.BooleanField()
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'photologue_photo'

class TribesTribe(models.Model):
    id = models.IntegerField(primary_key=True)
    slug = models.CharField(unique=True, max_length=50)
    name = models.CharField(unique=True, max_length=80)
    creator = models.ForeignKey(TgUser)
    created = models.DateTimeField()
    description = models.TextField()
    deleted = models.BooleanField()
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'tribes_tribe'

class TribesTribeMembers(models.Model):
    id = models.IntegerField(primary_key=True)
    tribe = models.ForeignKey(TribesTribe)
    user = models.ForeignKey(TgUser)
    class Meta:
        db_table = u'tribes_tribe_members'

class PhotosImage(models.Model):
    id = models.IntegerField(primary_key=True)
    image = models.CharField(max_length=100)
    date_taken = models.DateTimeField()
    view_count = models.IntegerField()
    crop_from = models.CharField(max_length=10)
    effect = models.ForeignKey(PhotologuePhotoeffect)
    title = models.CharField(max_length=200)
    title_slug = models.CharField(max_length=50)
    caption = models.TextField()
    date_added = models.DateTimeField()
    is_public = models.BooleanField()
    member = models.ForeignKey(TgUser)
    safetylevel = models.IntegerField()
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'photos_image'

class PhotosImagePhotoset(models.Model):
    id = models.IntegerField(primary_key=True)
    image = models.ForeignKey(PhotosImage)
    photoset = models.ForeignKey(PhotosPhotoset)
    class Meta:
        db_table = u'photos_image_photoset'

class PhotosPhotoset(models.Model):
    id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=200)
    description = models.TextField()
    publish_type = models.IntegerField()
    tags = models.CharField(max_length=255)
    class Meta:
        db_table = u'photos_photoset'

class TgUser(models.Model):
    id = models.IntegerField(primary_key=True)
    user_name = models.CharField(unique=True, max_length=255)
    email_address = models.CharField(unique=True, max_length=255)
    active = models.SmallIntegerField()
    display_name = models.CharField(max_length=255)
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    title = models.CharField(max_length=255)
    organisation = models.CharField(max_length=255)
    mobile = models.CharField(max_length=30)
    work = models.CharField(max_length=30)
    home = models.CharField(max_length=30)
    fax = models.CharField(max_length=30)
    password = models.CharField(max_length=40)
    created = models.DateTimeField()
    email2 = models.CharField(max_length=255)
    email3 = models.CharField(max_length=255)
    address = models.TextField()
    skype_id = models.TextField()
    sip_id = models.TextField()
    website = models.TextField()
    homeplace = models.ForeignKey(Location)
    cops = models.TextField() # This field type is a guess.
    bristol_metadata = models.TextField() # This field type is a guess.
    handset = models.TextField()
    ext = models.TextField()
    frank_pin = models.TextField()
    gb_storage = models.TextField()
    os = models.TextField()
    storage_loc = models.TextField()
    description = models.TextField()
    billto = models.ForeignKey('self')
    bill_to_profile = models.SmallIntegerField()
    bill_to_company = models.TextField()
    billingaddress = models.TextField()
    bill_phone = models.TextField()
    bill_fax = models.TextField()
    bill_email = models.TextField()
    bill_company_no = models.TextField()
    bill_vat_no = models.TextField()
    child_name = models.TextField()
    mimetype = models.TextField()
    unix_hash = models.CharField(max_length=50)
    lanman_hash = models.CharField(max_length=50)
    nt_hash = models.CharField(max_length=50)
    outstanding = models.DecimalField(max_digits=10, decimal_places=2)
    reminder_counter = models.IntegerField()
    last_reminder = models.DateTimeField()
    reminderkey = models.CharField(max_length=50)
    image_mimetype = models.CharField(max_length=15)
    welcome_sent = models.SmallIntegerField()
    signedby = models.ForeignKey('self')
    hostcontact = models.ForeignKey('self')
    public_field = models.SmallIntegerField()
    modified = models.DateTimeField()
    rfid = models.CharField(max_length=40)
    access_policies = models.TextField() # This field type is a guess.
    disabled_policies = models.TextField() # This field type is a guess.
    username = models.CharField(max_length=30)
    email = models.CharField(max_length=75)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    is_superuser = models.BooleanField()
    last_login = models.DateField()
    date_joined = models.DateField()
    class Meta:
        db_table = u'tg_user'

class TgUserUserPermissions(models.Model):
    id = models.IntegerField(primary_key=True)
    user = models.ForeignKey(TgUser)
    permission = models.ForeignKey(AuthPermission)
    class Meta:
        db_table = u'tg_user_user_permissions'

