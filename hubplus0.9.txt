# review code for other test cases
# general filter and get, and get_or_create
# finish decorator
fix server
application process

Tom  - generate slider (views)
     - set slider (view)
     - on create profile set user as admin, and profile to acquire from user
     - single slider UI
     



Example configuration
---------------------
a) A comment is in a wiki which is in a group
b) The wiki page has set security context to itself.

The comment is "contained" in the wiki. The wiki is "contained" in the group.
If security context of the comment is not set it looks up through "containing object" i.e. wiki
The agent - is found by going up the hierarchy until we find a user or a group, OR by associating an agent with a security context. The user or the group admin of the group get to set permissions  


Define 1 to many containment relation.


Wednesday
---------

- Tom Group model - group extra + tg_groups to plus_groups

- Phil + Tom - finish permissions

  *** If the user then reverts this wiki to using the "defaults" from Kings Cross again, do we delete these custom SecurityTags? I think so.

  ** SliderSet to manage creation and deletion of agent-mappings. (Never creates or destroys security tags)
  ** SliderSet to represent and manage constraints
  ** SliderSet also manages creating or deleting custom security tags
  ** SliderSet to generate json for javascript sliders-set
  ** adapt json returned by javascript library to the server, it should be nothing more than {'context_type':context_type,'context_id':context_id, 'settings':  [Interface_id, [agent_type, agent_id]]* } 
  ** SliderSet default format (create from json?)
  ** Make sure working for Profile


- Phil + Tom - sign-up, invite and apply logic
  ** 1)Application form (for non-site-members who want to join)
  ** 2)view to handle the application, creates a record in the "Contacts" table with details, + a record in an "Application" class which holds things like the "request to join" message, the host's reply message etc.
  ** 3)page, showing a list of outstanding applications to a host, giving a way to authorize them
  ** 4)view for a host to accept the application. At this point :
  *** 5)if the applicant is not currently a User, (but will still be a Contact), an hmac activation url is created and sent by email.
  *** 6)if the applicant is an existing user, a confirmation notification is sent, and the user becomes a member of the group
 
  ** 7)Invite form, which allows an existing member or admin to invite either an existing User or a non-site-member to join the site, and optionally further groups.
  *** 8)the view for this form will create the hmac acceptance url to be sent as part of an invitation, either by email, to a non-user, or by notification to an existing user.
  **** 9) as in step 6, when the acceptance url is clicked, if this is an existing user, we just add to the relevant group, if, it's just a contact, we create the User and Profile first (from the Contact data) and then add to groups
  

   

  *** Invites
  **** start by comparing pinax signup process which has a lot of similarities
  **** check mail facilities on server
  **** A "generate invite url" function which takes (inviter, invitee, the id of the thing being invited to (eg. all_members), the secret key) ==> returns a URL; this function tests that the inviter has permission to invite someone to this group
  **** An "invite" method which fires off an email containing the url
  **** urls.py which matches this URL and forwards to a view
  **** view.py which a) creates a new user, if there isn't one already, and b) adds the user to the group
  **** NO state is kept in the database UNTIL the acceptance link is clicked
- Phil - sign-up, invite and apply form
- Phil + Jesson - sign-up template integration s
- Phil + Tom - sign-up UI - js elements


- Tom wiki + group tests - security_context and context/container



Monday
--------
- Tom wiki backend implementation
- Phil - Group's UI  + create Hubs (with location object)

Tuesday - Thursday
------------------
- Tom wiki UI
- Phil + Jesson - Group permissions dashboard
- Phil + Jesson - tweets, messaging and comments (on documents) from pinax + ui enhancements
                - set status of a group


Friday - Sunday
---------------
Phil + Tom - file upload + image previewing http://www.ohloh.net/p/django-thumbs ?
Phil + Tom - full text search - backend
Phil + Tom - field-value search
Jesson - Search and tag filtering interface
Phil + Tom - results batching and sorting

Monday - Friday
---------------
Tom + Phil - tag search
Jesson - Feed customisation design

Saturday - Sunday
-----------------
Tom - Feeds and feed customisation

Monday 25th - 1st September
---------------------------
- Phil + Jesson - Polishing, bugs and browser compatibility
- Phil MHPSS imports
- Tom - js browser issues
- Tom + Shekhar - hubspace integration
 

Tuesday 1st September
---------------------
Begin Testing! With Hosts and MHPSS. Data not stored 

1st - 15th
----------
- just testing and improvements phase.
- Tom to integrate speeqe or jw chat


15th September
--------------
editor - image inclusion - flickr plugin - autoadjusting height - yui 
Go live with whole Hub+ team + selection of members

15th November
-------------
Hard launch with members! International hosted event conferenced between Hubs - with people testing.


Tweets
------
From pinax

Groups
------
HP - 0.9

Join/Leave/Invite/Apply to Join/Set Status/Edit Home Page, interfaces with permissions control 
Sign up Process
Inplace Fields / Attributes
tag group as "about ..."


- Place item in owning AGENT
Group permissions Dashboard (slider group for each type)
Host Group (default to only visible to its members)

Hubs
----
Create Hub object (members group with associated location)
Bring in Location Data for Hub 


Invoicing - HP 0.9/1.0
---------
tick box selection when invoicing
invoice redesign + pisa


Tags, Feed and Search
---------------------
HP 0.9
- copy ohloh.net for design inspiration
- look at django-tagging
- fix existing tagging
- tag refinements search ... urls: ${}/tag/sustainability+renewable_energy  '+' is AND  and _ is "separator"
  - maintain table of tag relations with intersection counts - map this by the amount of objects actually accessible. 
- tag tweets, pages, events
- only see the tagged items you have permission to
- your feed / group feed - customise with multiple searches, tags of the users and groups you are following. 
- Filter feed by tags, "user as group"? (author), title, fulltext (keyword),  - Order by date, author, title. Save filter + sorting combination
- field search/filter - attribute:value
- fulltext search/filter - http://code.google.com/p/django-solr-search/  OR http://github.com/dcramer/django-sphinx/ http://haystacksearch.org/docs/

http://pypi.python.org/pypi/pdfminer/ - get text from pdf docs - EASY
http://www.unixuser.org/~euske/python/pdfminer/index.html 
http://wiki.services.openoffice.org/wiki/PyUNO_bridge + openoffice - to extract word docs - HARD


http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-list-detail-object-list
http://code.google.com/p/django-pagination/

Wiki
----
HP 0.9
------
http://sct.sphene.net/wiki/show/Start/
http://code.google.com/p/django-wikiapp/


- Page editing - wysiwyg
- page title to page name
- tweet - description of changes (enable tweeting)
- Preview functionality
- autocomplete wiki linking (this group first then related groups, then all groups), with create page functionality - see HubKnowledge
- file upload to page and attachment (see hubknowledge) - image previews (cropping)  http://pypi.python.org/pypi/django-generic-images/0.15a
http://pypi.python.org/pypi/django-attachments/0.3.1
- comments (enable)
- permissions control


http://hg.piranha.org.ua/django-history/
http://docs.djangoproject.com/en/dev/howto/outputting-pdf/

Events
------
HP 0.9
------
Allow creation of calendars, on user, group, Hub or resource.
Create event type which appears in calendar according to its tags.
If calendar represents a resource, create rusage with event - booking wizard = first add event -> confirm rusage details
tag an event with the "calendar" tag to make it appear in a calendar

ical / atom cal feed

Messaging
---------
HP 0.9
------
- autocomplete (must complete) messaging
- message people who are following you

Users
-----
HP 0.9
------
allow registration of users with . in username
include hubspace notes


Speed up pinax HP 0.9
--------------
concat js and serve as gzipped  http://www.ohloh.net/p/django-compress ?
use lightty for static files 
django-mptt

Financial + User data export HP 0.9
----------------------------


==== Extra tasks ====

1) Move GroupExtra fields back into TgGroups
2) Patch script for hubspace database to add the extra fields

==== Dump of etherpad discussion ====

context_type_configs = {'TgGroup': {{ 'target' : target
              'possible_types' : ['profile', 'tggroup', 'wikipage', 'etc'] # actually, maybe Django's "model name"  as in the "model" field of the ContentType class
              'slider_agents': [[world_type,world_id],
                                     [all_members_type,all_members_is],
                                     [$context_agent_type,$context_agent_id], 
                                     [ $this_admin_type,$this_admin_id]], 
              'interfaces':{'profile':['Profile.Viewer','Profile.Editor','Profile.PhoneViewer','Profile.EmailViewer', ...],
                               'tggroup':['TgGroup.Viewer','TgGroup.Editor','TgGroup.Join',...],...},
              'constraints':{'profile':[['Profile.Viewer','Profile.Editor'],['Profile.Viewer','Profile.PhoneViewer'],['Profile.Viewer','Profile.EmailViewer'] ...],
              'defaults':{'profile':['Profile.Viewer':$       
                                                    }
                                    'Wiki: }

def create_group():
     group =  Group(args)
     group.save()
     security = SecurityContext(group, config_type_configs['TgGrouip'])
 
 #groups - has_members, is an agent, it has things in it, 
 
class SecurityContext :
     """Target is the thing the context is associated with e.g. Group. The thing that we will metaphorically put things "in".
     Context Agent is the 

     """
     target_content_type = models.ForeignKey(ContentType,related_name='blah')
     target_object_id = models.PositiveIntegerField()
     target = generic.GenericForeignKey('target_content_type', 'target_object_id') 
     context_agent_content_type = models.ForeignKey(ContentType,related_name='blah')
     context_agent_object_id = models.PositiveIntegerField()
     context_agent = generic.GenericForeignKey('context_agent_content_type', 'context_angent_object_id')
     # e.g. if permissions are set on a wiki page: context_agent is the group  and the wiki becomes its own context
     #e.g.2 if permission are set on a profile: context_agent is the User and the context is the profile.
     admin_content_type = models.ForeignKey(ContentType,related_name='blah')
     admin_object_id = models.PositiveIntegerField()
     admin_agent = generic.GenericForeignKey('admin_content_type', 'admin_object_id')
     possible_types = []w
     slider_agents = []   # order actually matters here
     interfaces  = {}   # {type: [interface_order]}
     contraints = {}    # {type: [contstraints]}  e.g. {wiki:['editor<viewer']}
     defaults  = {}     #{ type: [{interface:default_group},{interface:default_group}}

     def __init__(self, target, json, ):
             """Setup security tags
             """
             self.target = target
             self.json_to_context(json)
             for type
             SecurityTag.create(interface, self).add_agent(new_agent)

     def json_to_context(self, json):
            """Phil, please put json definition of context here. I guess this would be defined in associate with each class that can be a context"""

How do we represent "dynamic agents"
            Example json : 
            { 'target' : target
              'possible_types' : ['profile', 'tggroup', 'wikipage', 'etc'] # actually, maybe Django's "model name"  as in the "model" field of the ContentType class
              'slider_agents': [[world_type,world_id],
                                     [all_members_type,all_members_is],
                                     [$context_agent_type,$context_agent_id], 
                                     [ $this_admin_type,$this_admin_id]], 
              'interfaces':{'profile':['Profile.Viewer','Profile.Editor','Profile.PhoneViewer','Profile.EmailViewer', ...],
                               'tggroup':['TgGroup.Viewer','TgGroup.Editor','TgGroup.Join',...],...},
              'constraints':{'profile':[['Profile.Viewer','Profile.Editor'],['Profile.Viewer','Profile.PhoneViewer'],['Profile.Viewer','Profile.EmailViewer'] ...],
              'defaults':{'profile':['Profile.Viewer':$       
            """
            for agent in slider_agents:
                if agent.startswith('$'):
                    agent = getattr(context, agent[1:])
                else:
    
     
     
     def move_slider(self, new_agent, interface):
          for agent in slider_agents:
              if agent not in SecurityTag.objects.filter(interface, self).agents:
                
              if agent == new_agent:
              
     def add_arbitrary_agent(self, new_agent, interface):
              tag = SecurityTag.objects.filter(interface, self)
              tag.add_agent(new_agent)
              
Now you have lists of possible types, and slider_agents, interfaces etc. ... are these different per instance of SecurityContext? 

Slider agents are different, if you can only create certain types of things in certain contexts then interfaces are different. In reality constraints are probably relationships between certain interfaces. e.g. Group.View can't be lower than Group.Editor


