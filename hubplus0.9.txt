Phil - Write decorator to explicitly check for a given interface on the current resource (second argument) when calling a function. decorator should also wrap the current resource in a secure_wrapper.
     - Write template decorator which automatically wraps "secure" objects in a template_secure_wrapper
     - override generic object manager filter and get functions to use secure_wrapper. 
     - write high-level tests for PermissionsSystem, and SecurityContext
     - on create group create admin group. Whenever we create a group, user or set customize permissions the slider-set we create a new security context
     
     - on create security context set the agent as a "host". The agents admin - this determines who will be able to *set permissions*, i.e. the admin group of this group, and a necessary monotonic tag acquisition (sliders).
     
     - on create profile set user as admin, and profile to acquire from user
     
     - find agent from acquistion hierarchy + host


Tom - json specification of user, profile, group, wiki and comments
    - different types of groups - "template" groups and clone group permissions
    - add manage permissions interface to most objects  i.e. set_security_context, move_slider

    - generate slider (view)
    - change slider (view)
    - customize permissions (make security context)

    - templatetag - include slider for interface, include slider set for security context
    - initialise types (maps + any patching)
    - control permissions on security tags - admin only 


Example configuration
---------------------
a) A comment is in a wiki which is in a group
b) The wiki page has set security context to itself.

The comment is "contained" in the wiki. The wiki is "contained" in the group.
If security context of the comment is not set it looks up through "containing object" i.e. wiki
The agent - is found by going up the hierarchy until we find a user or a group, OR by associating an agent with a security context. The user or the group admin of the group get to set permissions  



Define 1 to many containment relation.



Wednesday
---------
- Tom Group model - group extra + tg_groups to plus_groups

- Phil + Tom - finish permissions

  *** If the user then reverts this wiki to using the "defaults" from Kings Cross again, do we delete these custom SecurityTags? I think so.

  ** SliderSet to manage creation and deletion of agent-mappings. (Never creates or destroys security tags)
  ** SliderSet to represent and manage constraints
  ** SliderSet also manages creating or deleting custom security tags
  ** SliderSet to generate json for javascript sliders-set
  ** adapt json returned by javascript library to the server, it should be nothing more than {'context_type':context_type,'context_id':context_id, 'settings':  [Interface_id, [agent_type, agent_id]]* } 
  ** SliderSet default format (create from json?)
  ** Make sure working for Profile


- Phil + Tom - sign-up, invite and apply logic
  ** create an Application class which holds things like the "request to join" message, the host's reply message
  ** similar Invite class which holds invite text 
  ** tracking the state (maybe using Tracker or directly in the Application / Invitation classes)
  *** Invites
  **** start by comparing pinax signup process which has a lot of similarities
  **** check mail facilities on server
  **** A module which manages invites and remembers the site's secret key (get_secret_key) (maybe permissionable?)
  **** A "generate invite url" function which takes (inviter, invitee, the id of the thing being invited to (eg. all_members), the secret key) ==> returns a URL; this function tests that the inviter has permission to invite someone to this group
  **** An "invite" method which fires off an email containing the url
  **** urls.py which matches this URL and forwards to a view
  **** view.py which a) creates a new user, if there isn't one already, and b) adds the user to the group
  **** NO state is kept in the database UNTIL the acceptance link is clicked
- Phil - sign-up, invite and apply form
- Phil + Jesson - sign-up template integration s
- Phil + Tom - sign-up UI - js elements


- Tom wiki + group tests - security_context and context/container



Monday
--------
- Tom wiki backend implementation
- Phil - Group's UI  + create Hubs (with location object)

Tuesday - Thursday
------------------
- Tom wiki UI
- Phil + Jesson - Group permissions dashboard
- Phil + Jesson - tweets, messaging and comments (on documents) from pinax + ui enhancements
                - set status of a group


Friday - Sunday
---------------
Phil + Tom - file upload + image previewing http://www.ohloh.net/p/django-thumbs ?
Phil + Tom - full text search - backend
Phil + Tom - field-value search
Jesson - Search and tag filtering interface
Phil + Tom - results batching and sorting

Monday - Friday
---------------
Tom + Phil - tag search
Jesson - Feed customisation design

Saturday - Sunday
-----------------
Tom - Feeds and feed customisation

Monday 25th - 1st September
---------------------------
- Phil + Jesson - Polishing, bugs and browser compatibility
- Phil MHPSS imports
- Tom - js browser issues
- Tom + Shekhar - hubspace integration
 

Tuesday 1st September
---------------------
Begin Testing! With Hosts and MHPSS. Data not stored 

1st - 15th
----------
- just testing and improvements phase.
- Tom to integrate speeqe or jw chat


15th September
--------------
editor - image inclusion - flickr plugin - autoadjusting height - yui 
Go live with whole Hub+ team + selection of members

15th November
-------------
Hard launch with members! International hosted event conferenced between Hubs - with people testing.


Tweets
------
From pinax

Groups
------
HP - 0.9

Join/Leave/Invite/Apply to Join/Set Status/Edit Home Page, interfaces with permissions control 
Sign up Process
Inplace Fields / Attributes
tag group as "about ..."


- Place item in owning AGENT
Group permissions Dashboard (slider group for each type)
Host Group (default to only visible to its members)

Hubs
----
Create Hub object (members group with associated location)
Bring in Location Data for Hub 


Invoicing - HP 0.9/1.0
---------
tick box selection when invoicing
invoice redesign + pisa


Tags, Feed and Search
---------------------
HP 0.9
- copy ohloh.net for design inspiration
- look at django-tagging
- fix existing tagging
- tag refinements search ... urls: ${}/tag/sustainability+renewable_energy  '+' is AND  and _ is "separator"
  - maintain table of tag relations with intersection counts - map this by the amount of objects actually accessible. 
- tag tweets, pages, events
- only see the tagged items you have permission to
- your feed / group feed - customise with multiple searches, tags of the users and groups you are following. 
- Filter feed by tags, "user as group"? (author), title, fulltext (keyword),  - Order by date, author, title. Save filter + sorting combination
- field search/filter - attribute:value
- fulltext search/filter - http://code.google.com/p/django-solr-search/  OR http://github.com/dcramer/django-sphinx/ http://haystacksearch.org/docs/

http://pypi.python.org/pypi/pdfminer/ - get text from pdf docs - EASY
http://www.unixuser.org/~euske/python/pdfminer/index.html 
http://wiki.services.openoffice.org/wiki/PyUNO_bridge + openoffice - to extract word docs - HARD


http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-list-detail-object-list
http://code.google.com/p/django-pagination/

Wiki
----
HP 0.9
------
http://sct.sphene.net/wiki/show/Start/
http://code.google.com/p/django-wikiapp/


- Page editing - wysiwyg
- page title to page name
- tweet - description of changes (enable tweeting)
- Preview functionality
- autocomplete wiki linking (this group first then related groups, then all groups), with create page functionality - see HubKnowledge
- file upload to page and attachment (see hubknowledge) - image previews (cropping)  http://pypi.python.org/pypi/django-generic-images/0.15a
http://pypi.python.org/pypi/django-attachments/0.3.1
- comments (enable)
- permissions control


http://hg.piranha.org.ua/django-history/
http://docs.djangoproject.com/en/dev/howto/outputting-pdf/

Events
------
HP 0.9
------
Allow creation of calendars, on user, group, Hub or resource.
Create event type which appears in calendar according to its tags.
If calendar represents a resource, create rusage with event - booking wizard = first add event -> confirm rusage details
tag an event with the "calendar" tag to make it appear in a calendar

ical / atom cal feed

Messaging
---------
HP 0.9
------
- autocomplete (must complete) messaging
- message people who are following you

Users
-----
HP 0.9
------
allow registration of users with . in username
include hubspace notes


Speed up pinax HP 0.9
--------------
concat js and serve as gzipped  http://www.ohloh.net/p/django-compress ?
use lightty for static files 
django-mptt

Financial + User data export HP 0.9
----------------------------

