User  *Tom*
      - image	 
      - permissions
      - tags

      *Phil*
      - follow
      - status
      - message        
      - hostinfo
      - Regions


Tags *Tom*
      - secure resource to work for arbitrary resource types - and for multiple input resources
      - Tags get created in an agent - need create_Tag for that agent
      - Tags created on groups are created by the user on behalf of the group.
      - autocomplete looks first in the users tags, then in the tags of the resource's agent, and then in all the users enclosures, and then, all tags in the system ++ filter by the type of tags
      - tags have a view interface which can be set by the tagger on any tag

      - html5lib sanitize - htmlField + beautiful soup  ++ use mark_safe instead of turning autoescaping off

Groups - group name based_url
       - group template editing etc      

Phil - application process
     - host info security setup


Tom  - create group form
     - create wiki page form

Slider UI
     - generate slider (views)
     - set slider (view)
     - on create profile set user as admin, and profile to acquire from user
     - single slider UI


hubspace
--------
rename member level hub groups from "group members" to "group" 


misc
----
- google maps need to be made more accurate in identifying addresses - api
- inplace editing deal with errors - and error messages




- Tom Group model - group extra + tg_groups to plus_groups

- Phil + Tom - finish permissions

  *** If the user then reverts this wiki to using the "defaults" from Kings Cross again, do we delete these custom SecurityTags? I think so.

  ** SliderSet to manage creation and deletion of agent-mappings. (Never creates or destroys security tags)
  ** SliderSet to represent and manage constraints
  ** SliderSet also manages creating or deleting custom security tags
  ** SliderSet to generate json for javascript sliders-set
  ** adapt json returned by javascript library to the server, it should be nothing more than {'context_type':context_type,'context_id':context_id, 'settings':  [Interface_id, [agent_type, agent_id]]* } 
  ** SliderSet default format (create from json?)
  ** Make sure working for Profile


- Phil + Tom - sign-up, invite and apply logic
  ** 1)Application form (for non-site-members who want to join)
  ** 2)view to handle the application, creates a record in the "Contacts" table with details, + a record in an "Application" class which holds things like the "request to join" message, the host's reply message etc.
  ** 3)page, showing a list of outstanding applications to a host, giving a way to authorize them
  ** 4)view for a host to accept the application. At this point :
  *** 5)if the applicant is not currently a User, (but will still be a Contact), an hmac activation url is created and sent by email.
  *** 6)if the applicant is an existing user, a confirmation notification is sent, and the user becomes a member of the group
 
  ** 7)Invite form, which allows an existing member or admin to invite either an existing User or a non-site-member to join the site, and optionally further groups.
  *** 8)the view for this form will create the hmac acceptance url to be sent as part of an invitation, either by email, to a non-user, or by notification to an existing user.
  **** 9) as in step 6, when the acceptance url is clicked, if this is an existing user, we just add to the relevant group, if, it's just a contact, we create the User and Profile first (from the Contact data) and then add to groups
  

   

  *** Invites
  **** start by comparing pinax signup process which has a lot of similarities
  **** check mail facilities on server
  **** A "generate invite url" function which takes (inviter, invitee, the id of the thing being invited to (eg. all_members), the secret key) ==> returns a URL; this function tests that the inviter has permission to invite someone to this group
  **** An "invite" method which fires off an email containing the url
  **** urls.py which matches this URL and forwards to a view
  **** view.py which a) creates a new user, if there isn't one already, and b) adds the user to the group
  **** NO state is kept in the database UNTIL the acceptance link is clicked
- Phil - sign-up, invite and apply form
- Phil + Jesson - sign-up template integration s
- Phil + Tom - sign-up UI - js elements


- Tom wiki + group tests - security_context and context/container



Monday
--------
- Tom wiki backend implementation
- Phil - Group's UI  + create Hubs (with location object)

Tuesday - Thursday
------------------
- Tom wiki UI
- Phil + Jesson - Group permissions dashboard
- Phil + Jesson - tweets, messaging and comments (on documents) from pinax + ui enhancements
                - set status of a group


Friday - Sunday
---------------
Phil + Tom - file upload + image previewing http://www.ohloh.net/p/django-thumbs ?
Phil + Tom - full text search - backend
Phil + Tom - field-value search
Jesson - Search and tag filtering interface
Phil + Tom - results batching and sorting

Monday - Friday
---------------
Tom + Phil - tag search
Jesson - Feed customisation design

Saturday - Sunday
-----------------
Tom - Feeds and feed customisation

Monday 25th - 1st September
---------------------------
- Phil + Jesson - Polishing, bugs and browser compatibility
- Phil MHPSS imports
- Tom - js browser issues
- Tom + Shekhar - hubspace integration
 

Tuesday 1st September
---------------------
Begin Testing! With Hosts and MHPSS. Data not stored 

1st - 15th
----------
- just testing and improvements phase.
- Tom to integrate speeqe or jw chat


15th September
--------------
editor - image inclusion - flickr plugin - autoadjusting height - yui 
Go live with whole Hub+ team + selection of members

15th November
-------------
Hard launch with members! International hosted event conferenced between Hubs - with people testing.


Tweets
------
From pinax

Groups
------
HP - 0.9

Join/Leave/Invite/Apply to Join/Set Status/Edit Home Page, interfaces with permissions control 
Sign up Process
Inplace Fields / Attributes
tag group as "about ..."


- Place item in owning AGENT
Group permissions Dashboard (slider group for each type)
Host Group (default to only visible to its members)

Hubs
----
Create Hub object (members group with associated location)
Bring in Location Data for Hub 


Invoicing - HP 0.9/1.0
---------
tick box selection when invoicing
invoice redesign + pisa


Tags, Feed and Search
---------------------
HP 0.9
- copy ohloh.net for design inspiration
- look at django-tagging
- fix existing tagging
- tag refinements search ... urls: ${}/tag/sustainability+renewable_energy  '+' is AND  and _ is "separator"
  - maintain table of tag relations with intersection counts - map this by the amount of objects actually accessible. 
- tag tweets, pages, events
- only see the tagged items you have permission to
- your feed / group feed - customise with multiple searches, tags of the users and groups you are following. 
- Filter feed by tags, "user as group"? (author), title, fulltext (keyword),  - Order by date, author, title. Save filter + sorting combination
- field search/filter - attribute:value
- fulltext search/filter - http://code.google.com/p/django-solr-search/  OR http://github.com/dcramer/django-sphinx/ http://haystacksearch.org/docs/

http://pypi.python.org/pypi/pdfminer/ - get text from pdf docs - EASY
http://www.unixuser.org/~euske/python/pdfminer/index.html 
http://wiki.services.openoffice.org/wiki/PyUNO_bridge + openoffice - to extract word docs - HARD


http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-list-detail-object-list
http://code.google.com/p/django-pagination/

Wiki
----
HP 0.9
------
http://sct.sphene.net/wiki/show/Start/
http://code.google.com/p/django-wikiapp/


- Page editing - wysiwyg
- page title to page name
- tweet - description of changes (enable tweeting)
- Preview functionality
- autocomplete wiki linking (this group first then related groups, then all groups), with create page functionality - see HubKnowledge
- file upload to page and attachment (see hubknowledge) - image previews (cropping)  http://pypi.python.org/pypi/django-generic-images/0.15a
http://pypi.python.org/pypi/django-attachments/0.3.1
- comments (enable)
- permissions control


http://hg.piranha.org.ua/django-history/
http://docs.djangoproject.com/en/dev/howto/outputting-pdf/

Events
------
HP 0.9
------
Allow creation of calendars, on user, group, Hub or resource.
Create event type which appears in calendar according to its tags.
If calendar represents a resource, create rusage with event - booking wizard = first add event -> confirm rusage details
tag an event with the "calendar" tag to make it appear in a calendar

ical / atom cal feed

Messaging
---------
HP 0.9
------
- autocomplete (must complete) messaging
- message people who are following you

Users
-----
HP 0.9
------
allow registration of users with . in username
include hubspace notes


Speed up pinax HP 0.9
--------------
concat js and serve as gzipped  http://www.ohloh.net/p/django-compress ?
use lightty for static files 
django-mptt

Financial + User data export HP 0.9
----------------------------


==== Extra tasks ====

1) Move GroupExtra fields back into TgGroups
2) Patch script for hubspace database to add the extra fields


